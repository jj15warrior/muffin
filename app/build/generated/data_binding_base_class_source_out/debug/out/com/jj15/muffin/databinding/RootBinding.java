// Generated by view binder compiler. Do not edit!
package com.jj15.muffin.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.helper.widget.Layer;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.jj15.muffin.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.osmdroid.views.MapView;

public final class RootBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button findme;

  @NonNull
  public final Layer layer1;

  @NonNull
  public final Layer layer2;

  @NonNull
  public final MapView map;

  @NonNull
  public final RelativeLayout maplayout;

  @NonNull
  public final Button pinit;

  @NonNull
  public final Button search;

  @NonNull
  public final Button settings;

  private RootBinding(@NonNull ConstraintLayout rootView, @NonNull Button findme,
      @NonNull Layer layer1, @NonNull Layer layer2, @NonNull MapView map,
      @NonNull RelativeLayout maplayout, @NonNull Button pinit, @NonNull Button search,
      @NonNull Button settings) {
    this.rootView = rootView;
    this.findme = findme;
    this.layer1 = layer1;
    this.layer2 = layer2;
    this.map = map;
    this.maplayout = maplayout;
    this.pinit = pinit;
    this.search = search;
    this.settings = settings;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RootBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RootBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.root, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RootBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.findme;
      Button findme = ViewBindings.findChildViewById(rootView, id);
      if (findme == null) {
        break missingId;
      }

      id = R.id.layer1;
      Layer layer1 = ViewBindings.findChildViewById(rootView, id);
      if (layer1 == null) {
        break missingId;
      }

      id = R.id.layer2;
      Layer layer2 = ViewBindings.findChildViewById(rootView, id);
      if (layer2 == null) {
        break missingId;
      }

      id = R.id.map;
      MapView map = ViewBindings.findChildViewById(rootView, id);
      if (map == null) {
        break missingId;
      }

      id = R.id.maplayout;
      RelativeLayout maplayout = ViewBindings.findChildViewById(rootView, id);
      if (maplayout == null) {
        break missingId;
      }

      id = R.id.pinit;
      Button pinit = ViewBindings.findChildViewById(rootView, id);
      if (pinit == null) {
        break missingId;
      }

      id = R.id.search;
      Button search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.settings;
      Button settings = ViewBindings.findChildViewById(rootView, id);
      if (settings == null) {
        break missingId;
      }

      return new RootBinding((ConstraintLayout) rootView, findme, layer1, layer2, map, maplayout,
          pinit, search, settings);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
